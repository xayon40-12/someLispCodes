(defun xi ()
  (* (- (random 2.0) 1.0) (sqrt 6.0)))
(compile 'xi)

(defun f (q u dt)
  (- (/ u (sqrt dt)) q))
(compile 'f)
(defun ff (q u dt d)
  (- (* (abs (- (/ u (sqrt dt)) q)) dt) d))
(compile 'ff)
(defun fff (q u dt)
  (abs (- (/ u (* 2 (sqrt dt))) q)))
(compile 'fff)

(defun dt (ff fff q u d)
  (let ((dt 0.00001)
        (h 0.1))
    (dotimes (i 10)
      (print dt)
      (setf dt (- dt (/ (funcall ff q u dt d) (/ (- (funcall ff q u (+ dt h) d) (funcall ff q u dt d)) h)))))
    dt))
(compile 'dt)
(dt #'ff #'fff 1d-6 -0.01d0 1d-1)

(defun qss (fq d q0)
  (let* ((q- q0)
        (t- 0.0)
        (u- (xi))
        (f- (funcall fq q- u- 1))
        (dt (dt #'ff #'fff q- u- d))
        (tc (+ t- dt))
        (q (+ q- (* f- dt)))
        (u (xi))
        (f (funcall fq q u dt)))
    (lambda (tt)
      (do () ((<= tt tc))
        (setf t- tc)
        (setf q- q)
        (setf f- f)
        (setf u- u)
        ;(setf dt (dt #'ff #'fff q- u- d))
        (setf dt (abs (/ d f-)))
        (setf tc (+ t- dt))
        (setf q (+ q- (* f- dt)))
        (setf u (xi))
        (setf f (funcall fq q u dt)))
      (+ q- (* (- tt t-) f-)))))
(compile 'qss)

;(exp -1d0)
;(funcall (qss #'f2 1d-6 1) 1)

(defun m (n)
  (let ((a 0.0)
        (b 0.0)
        (c 0.0)
        (next nil)
        (val 0))
    (dotimes (i n)
      (setf next (qss #'f 0.01 1))
      (setf val (funcall next 50))
      (setf val2 (funcall next 60))
      (setf val3 (funcall next 70))
      (incf a (* val val))
      (incf b (* val val2)) 
      (incf c (* val val3)))
    (values (/ a n) (/ b n) (/ c n))))
(compile 'm)

(m 100)
1

