;;; pde: f(q(t),u(t),t,i)
;;; u(t): external input as a function of t
(defun qss1 (initvec pde u delta)
  (let* ((len (length initvec))
         (x (make-array (list 2 len)))
         (q (make-array (list 2 len)))
         (f (make-array (list 2 len)))
         (times (make-array len))
         (id 0)
         (t- 0)
         (next (lambda ()
                 (let* ((idn (- 1 id)))
                   (do ((i 0 (1+ i)))
                       ((= i len))
                     (setf (aref f id i) (funcall pde q u t- i))
                     (setf (aref times i) (let ((fi (aref f id i)))
                                            (if (/= fi 0)
                                                (/ (- delta (abs (- (aref q id i) (aref x id i)))) (aref f id i))
                                                most-positive-double-float))))
                   (setf id idn)))))
    (lambda ()
      (funcall next)
      (dotimes (i len) (print (aref times i))))))


(let ((qss (qss1 #(0 0 0 0) (lambda (q u ti i) (- i)) (lambda (ti i) i) 0.1)))
  (funcall qss))
